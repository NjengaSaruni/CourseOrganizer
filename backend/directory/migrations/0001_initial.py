# Generated by Django 5.2.6 on 2025-09-11 03:27

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('registration_number', models.CharField(help_text='UoN registration number in format: PREFIX/XXXXXX/YYYY (middle part can be 1-6 digits)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='Registration number must be in format: PREFIX/XXXXXX/YYYY (e.g., GPR3/123456/2025, P15/1674/2014)', regex='^[A-Z]{1,4}\\d{0,2}/\\d{1,6}/\\d{4}$')])),
                ('phone_number', models.CharField(help_text='Phone number with country code', max_length=15)),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('teacher', 'Teacher'), ('admin', 'Administrator')], default='student', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('suspended', 'Suspended')], default='pending', max_length=10)),
                ('current_year', models.IntegerField(blank=True, choices=[(1, 'First Year'), (2, 'Second Year'), (3, 'Third Year'), (4, 'Fourth Year')], help_text='Current academic year (for students)', null=True)),
                ('current_semester', models.IntegerField(blank=True, choices=[(1, 'First Semester'), (2, 'Second Semester'), (3, 'Holiday Semester')], help_text='Current semester (for students)', null=True)),
                ('class_of', models.IntegerField(blank=True, help_text='Graduation year (Class of)', null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profiles/')),
                ('bio', models.TextField(blank=True, help_text='Brief biography or description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('student_id', models.CharField(help_text='Internal student ID', max_length=20, unique=True)),
                ('enrollment_date', models.DateField(help_text='Date of enrollment')),
                ('expected_graduation', models.DateField(help_text='Expected graduation date')),
                ('gpa', models.DecimalField(blank=True, decimal_places=2, help_text='Current GPA', max_digits=3, null=True)),
                ('credits_completed', models.IntegerField(default=0, help_text='Total credits completed')),
                ('credits_required', models.IntegerField(default=120, help_text='Total credits required for graduation')),
                ('is_full_time', models.BooleanField(default=True, help_text='Full-time or part-time student')),
                ('financial_aid', models.BooleanField(default=False, help_text='Receiving financial aid')),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=15)),
                ('emergency_contact_relationship', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('employee_id', models.CharField(help_text='Internal employee ID', max_length=20, unique=True)),
                ('department', models.CharField(help_text='Department or school', max_length=100)),
                ('position', models.CharField(help_text='Academic position (Lecturer, Professor, etc.)', max_length=100)),
                ('hire_date', models.DateField(help_text='Date of hire')),
                ('office_location', models.CharField(blank=True, help_text='Office location', max_length=100)),
                ('office_hours', models.TextField(blank=True, help_text='Office hours')),
                ('qualifications', models.TextField(blank=True, help_text='Academic qualifications')),
                ('research_interests', models.TextField(blank=True, help_text='Research interests')),
                ('is_tenured', models.BooleanField(default=False, help_text='Tenured faculty member')),
                ('is_active', models.BooleanField(default=True, help_text='Currently active faculty')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_start', models.IntegerField(help_text='Starting year (e.g., 2025 for 2025/2026)')),
                ('year_end', models.IntegerField(help_text='Ending year (e.g., 2026 for 2025/2026)')),
                ('is_active', models.BooleanField(default=False, help_text='Currently active academic year')),
                ('first_semester_start', models.DateField(help_text='First semester start date')),
                ('first_semester_end', models.DateField(help_text='First semester end date')),
                ('second_semester_start', models.DateField(help_text='Second semester start date')),
                ('second_semester_end', models.DateField(help_text='Second semester end date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-year_start', '-year_end'],
                'unique_together': {('year_start', 'year_end')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='academic_year',
            field=models.ForeignKey(blank=True, help_text='Current academic year', null=True, on_delete=django.db.models.deletion.CASCADE, to='directory.academicyear'),
        ),
        migrations.CreateModel(
            name='RegistrationRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(max_length=15)),
                ('registration_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message='Registration number must be in format: PREFIX/XXXXXX/YYYY (e.g., GPR3/123456/2025, P15/1674/2014)', regex='^[A-Z]{1,4}\\d{0,2}/\\d{1,6}/\\d{4}$')])),
                ('program', models.CharField(help_text='Academic program', max_length=100)),
                ('year_of_study', models.IntegerField(choices=[(1, 'First Year'), (2, 'Second Year'), (3, 'Third Year'), (4, 'Fourth Year')], help_text='Current year of study')),
                ('semester', models.IntegerField(choices=[(1, 'First Semester'), (2, 'Second Semester'), (3, 'Holiday Semester')], help_text='Current semester')),
                ('bio', models.TextField(blank=True, help_text='Brief introduction')),
                ('motivation', models.TextField(help_text='Why do you want to join the platform?')),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('under_review', 'Under Review')], default='pending', max_length=15)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('review_notes', models.TextField(blank=True, help_text='Admin review notes')),
                ('academic_year', models.ForeignKey(help_text='Academic year', on_delete=django.db.models.deletion.CASCADE, to='directory.academicyear')),
                ('created_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_request', to=settings.AUTH_USER_MODEL)),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_registrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
    ]
