# Generated by Django 5.2.6 on 2025-10-06 08:22

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('directory', '0006_remove_academicyear_first_semester_end_and_more'),
        ('school', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('description', models.TextField(blank=True)),
                ('year', models.IntegerField(choices=[(1, 'First Year'), (2, 'Second Year'), (3, 'Third Year'), (4, 'Fourth Year')], help_text='Academic year (1-4)')),
                ('semester', models.IntegerField(choices=[(1, 'First Semester'), (2, 'Second Semester'), (3, 'Holiday Semester')], help_text='Semester (1-3)')),
                ('credits', models.IntegerField(default=3, help_text='Number of credit hours')),
                ('is_core', models.BooleanField(default=True, help_text='Whether this is a core course')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('academic_year', models.ForeignKey(help_text='Academic year this course belongs to', on_delete=django.db.models.deletion.CASCADE, to='directory.academicyear')),
                ('target_classes', models.ManyToManyField(blank=True, help_text='Classes this course is designed for', related_name='courses', to='school.class')),
            ],
            options={
                'ordering': ['academic_year', 'year', 'semester', 'code'],
                'unique_together': {('code', 'academic_year')},
            },
        ),
        migrations.CreateModel(
            name='Meeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('meeting_url', models.URLField(blank=True)),
                ('meeting_id', models.CharField(blank=True, help_text='Unique meeting identifier for Jitsi', max_length=100, null=True, unique=True)),
                ('platform', models.CharField(choices=[('daily', 'Daily.co'), ('jitsi', 'Jitsi Meet'), ('zoom', 'Zoom'), ('google_meet', 'Google Meet'), ('teams', 'Microsoft Teams'), ('physical', 'Physical Meeting'), ('other', 'Other')], default='daily', max_length=20)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('live', 'Live'), ('ended', 'Ended'), ('cancelled', 'Cancelled')], default='scheduled', max_length=20)),
                ('scheduled_time', models.DateTimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('is_recording_enabled', models.BooleanField(default=True, help_text='Whether recording is enabled for this meeting')),
                ('recording_url', models.URLField(blank=True, help_text='URL to the recorded meeting')),
                ('is_auto_created', models.BooleanField(default=False, help_text='Whether this meeting was auto-created from a timetable entry')),
                ('room_password', models.CharField(blank=True, help_text='Optional password for the meeting room', max_length=50)),
                ('daily_room_name', models.CharField(blank=True, help_text='Daily.co room name', max_length=100)),
                ('daily_room_id', models.CharField(blank=True, help_text='Daily.co room ID', max_length=100)),
                ('daily_room_url', models.URLField(blank=True, help_text='Daily.co room URL')),
                ('daily_token', models.TextField(blank=True, help_text='Daily.co meeting token')),
                ('max_participants', models.IntegerField(default=50, help_text='Maximum number of participants')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('admin_host', models.ForeignKey(blank=True, help_text='Admin user who will be the default host', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='hosted_meetings', to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='course_api.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='JitsiRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recording_id', models.CharField(help_text='Jitsi recording ID', max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('recording', 'Recording'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('recording_url', models.URLField(blank=True, help_text='URL to the completed recording')),
                ('file_size', models.BigIntegerField(blank=True, help_text='Recording file size in bytes', null=True)),
                ('duration', models.DurationField(blank=True, help_text='Actual recording duration', null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('meeting', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='course_api.meeting')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('is_private', models.BooleanField(default=False, help_text='If true, members must be invited or approved')),
                ('max_members', models.PositiveIntegerField(default=8, help_text='Maximum members allowed in this group')),
                ('xmpp_room_name', models.CharField(blank=True, help_text='Local room name for XMPP MUC (e.g., sg-123)', max_length=120)),
                ('xmpp_room_jid', models.CharField(blank=True, help_text='Full room JID for XMPP MUC (e.g., sg-123@conference.example.com)', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(blank=True, help_text='Course focus for the study group', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='study_groups', to='course_api.course')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups_created', to=settings.AUTH_USER_MODEL)),
                ('student_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_groups', to='school.class')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('student_class', 'name')},
            },
        ),
        migrations.CreateModel(
            name='GroupMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_messages_sent', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='course_api.studygroup')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='GroupMeeting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('meeting_id', models.CharField(blank=True, help_text='Unique meeting identifier', max_length=100, null=True, unique=True)),
                ('platform', models.CharField(choices=[('jitsi', 'Jitsi Meet'), ('daily', 'Daily.co'), ('physical', 'Physical Meeting')], default='jitsi', max_length=20)),
                ('scheduled_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('meeting_url', models.URLField(blank=True)),
                ('location', models.CharField(blank=True, help_text='Physical location if platform is physical', max_length=255)),
                ('room_password', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_meetings', to='course_api.studygroup')),
            ],
            options={
                'ordering': ['-scheduled_time'],
            },
        ),
        migrations.CreateModel(
            name='TimetableEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday'), ('sunday', 'Sunday')], max_length=10)),
                ('subject', models.CharField(max_length=200)),
                ('time', models.CharField(max_length=50)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('group', models.CharField(blank=True, max_length=50)),
                ('lecturer', models.CharField(blank=True, max_length=200)),
                ('has_video_call', models.BooleanField(default=False, help_text='Whether this class has an associated video call')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetable_entries', to='course_api.course')),
            ],
            options={
                'ordering': ['day', 'time'],
            },
        ),
        migrations.CreateModel(
            name='Recording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('video_url', models.URLField(blank=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('platform', models.CharField(choices=[('zoom', 'Zoom'), ('google_meet', 'Google Meet'), ('teams', 'Microsoft Teams'), ('physical', 'Physical Meeting'), ('other', 'Other')], default='zoom', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='course_api.course')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('timetable_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='course_api.timetableentry')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='meeting',
            name='timetable_entry',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='meetings', to='course_api.timetableentry'),
        ),
        migrations.CreateModel(
            name='CourseMaterial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('file_url', models.URLField(blank=True)),
                ('file_type', models.CharField(blank=True, max_length=50)),
                ('material_type', models.CharField(choices=[('course_wide', 'Course Wide'), ('topic_wise', 'Topic Wise'), ('lesson_specific', 'Lesson Specific')], default='course_wide', max_length=20)),
                ('topic', models.CharField(blank=True, help_text='Topic name for topic-wise materials', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='course_api.course')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('timetable_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='materials', to='course_api.timetableentry')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudyGroupJoinRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_group_requests', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='join_requests', to='course_api.studygroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_group_join_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('group', 'user')},
            },
        ),
        migrations.CreateModel(
            name='StudyGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('member', 'Member'), ('admin', 'Admin')], default='member', max_length=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='course_api.studygroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_group_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('group', 'user')},
            },
        ),
        migrations.CreateModel(
            name='CourseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('content_type', models.CharField(choices=[('recording', 'Recording'), ('material', 'Material'), ('assignment', 'Assignment'), ('announcement', 'Announcement')], max_length=20)),
                ('lesson_date', models.DateField(help_text='Date when this lesson/content was delivered')),
                ('lesson_order', models.PositiveIntegerField(default=1, help_text='Order of this content within the lesson')),
                ('topic', models.CharField(blank=True, help_text='Topic or chapter name', max_length=200)),
                ('file_url', models.URLField(blank=True, help_text='URL to the content file')),
                ('file_path', models.CharField(blank=True, help_text='Local file path if stored locally', max_length=500)),
                ('file_size', models.BigIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('recording_platform', models.CharField(blank=True, choices=[('zoom', 'Zoom'), ('google_meet', 'Google Meet'), ('teams', 'Microsoft Teams'), ('physical', 'Physical Meeting'), ('other', 'Other')], max_length=20)),
                ('duration', models.DurationField(blank=True, help_text='Duration for recordings', null=True)),
                ('audio_only', models.BooleanField(default=False, help_text='Whether this is an audio-only recording')),
                ('material_type', models.CharField(blank=True, choices=[('pdf', 'PDF Document'), ('doc', 'Word Document'), ('ppt', 'PowerPoint'), ('video', 'Video File'), ('audio', 'Audio File'), ('image', 'Image'), ('link', 'External Link'), ('other', 'Other')], max_length=20)),
                ('is_published', models.BooleanField(default=True, help_text='Whether this content is visible to students')),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Number of times this content has been downloaded')),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times this content has been viewed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_contents', to='course_api.course')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('timetable_entry', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='course_contents', to='course_api.timetableentry')),
            ],
            options={
                'ordering': ['lesson_date', 'lesson_order', 'created_at'],
                'indexes': [models.Index(fields=['course', 'lesson_date'], name='course_api__course__42ef62_idx'), models.Index(fields=['content_type', 'is_published'], name='course_api__content_cf3509_idx')],
                'unique_together': {('course', 'lesson_date', 'lesson_order')},
            },
        ),
    ]
