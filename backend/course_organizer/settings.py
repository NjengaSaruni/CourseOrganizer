"""
Django settings for course_organizer project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-+-n0(ej=g!bt*opntm8u34m!&yud!wcth#**bgi8^ylg03rg(5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,co.riverlearn.co.ke', cast=lambda v: [s.strip() for s in v.split(',')])

# Add Railway internal hostnames for health checks
if not DEBUG:
    ALLOWED_HOSTS.extend(['localhost', '127.0.0.1'])

    # Allow all hosts for Railway health checks
    ALLOWED_HOSTS.append('*')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'directory',
    'course_api',
    'communication',
    'school',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Add whitenoise middleware only in production
if not DEBUG:
    MIDDLEWARE.insert(2, 'whitenoise.middleware.WhiteNoiseMiddleware')
    
    # Whitenoise configuration
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True

ROOT_URLCONF = 'course_organizer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'static')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'course_organizer.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use PostgreSQL for production, SQLite for development
if config('DATABASE_URL', default=None):
    try:
        import dj_database_url
        DATABASES = {
            'default': dj_database_url.parse(config('DATABASE_URL'))
        }
    except ImportError:
        # Fallback to SQLite if dj_database_url is not available
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'static'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Custom User Model
AUTH_USER_MODEL = 'directory.User'

# Jitsi Meet JWT Configuration
JITSI_APP_ID = 'course-organizer'
JITSI_APP_SECRET = os.environ.get('JITSI_APP_SECRET', 'your-jitsi-app-secret-change-in-production')
JITSI_ISSUER = 'course-organizer'
JITSI_AUDIENCE = 'jitsi'
JITSI_DOMAIN = os.environ.get('JITSI_DOMAIN', 'jitsi.riverlearn.co.ke')

# Jitsi JWT key material (RS256)
# PRIVATE key is used by backend to sign JWTs; PUBLIC key can be used for internal verification if needed
JITSI_PRIVATE_KEY = os.environ.get('JITSI_PRIVATE_KEY')
JITSI_PUBLIC_KEY = os.environ.get('JITSI_PUBLIC_KEY')

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# CORS settings
CORS_ALLOWED_ORIGINS = config(
    'CORS_ALLOWED_ORIGINS',
    default="http://localhost:4200,http://127.0.0.1:4200,https://co.riverlearn.co.ke,https://jitsi.riverlearn.co.ke",
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# Debug CORS settings
print(f"CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")
print(f"DEBUG mode: {DEBUG}")

CORS_ALLOW_CREDENTIALS = True

# Allow all origins in development, specific origins in production
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # In production, allow Railway domains and custom domain
    CORS_ALLOWED_ORIGINS.extend(['https://*.railway.app', 'http://*.railway.app', 'https://co.riverlearn.co.ke', 'https://jitsi.riverlearn.co.ke'])
    
    # Ensure required domains are always included
    for domain in ['https://co.riverlearn.co.ke', 'https://jitsi.riverlearn.co.ke']:
        if domain not in CORS_ALLOWED_ORIGINS:
            CORS_ALLOWED_ORIGINS.append(domain)
    
    # Also try allowing all origins temporarily to debug
    CORS_ALLOW_ALL_ORIGINS = True  # Temporarily allow all origins for debugging

# Additional CORS settings for better compatibility
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# CSRF settings
CSRF_TRUSTED_ORIGINS = config(
    'CSRF_TRUSTED_ORIGINS',
    default="http://localhost:4200,http://127.0.0.1:4200,https://co.riverlearn.co.ke,https://jitsi.riverlearn.co.ke",
    cast=lambda v: [s.strip() for s in v.split(',')]
)

# In development, allow all origins for CSRF
if DEBUG:
    CSRF_TRUSTED_ORIGINS.extend(['http://localhost:4200', 'http://127.0.0.1:4200'])

# Email settings (for production)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'debug.log',
        },
    },
        'loggers': {
            'course_api.views': {
                'handlers': ['console', 'file'],
                'level': 'INFO',
                'propagate': True,
            },
            'directory.views': {
                'handlers': ['console', 'file'],
                'level': 'INFO',
                'propagate': True,
            },
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
        },
    },
}

# Daily.co Video Call Configuration
DAILY_API_KEY = os.getenv('DAILY_API_KEY', '')
DAILY_DOMAIN = os.getenv('DAILY_DOMAIN', 'daily.co')
