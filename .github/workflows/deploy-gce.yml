name: Deploy to GCE

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [ main ]
    types: [completed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  GCE_INSTANCE: course-organizer-app
  GCE_ZONE: us-central1-a
  PROJECT_PATH: /opt/course-organizer

jobs:
  deploy:
    name: Deploy to GCE
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        cd ../frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build:prod

    - name: Collect static files
      run: |
        cd backend
        python manage.py collectstatic --noinput
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEBUG: False

    - name: Create deployment package
      run: |
        # Wait a moment to ensure all file operations are complete
        sleep 2
        
        # Create a temporary directory for the deployment package
        mkdir -p temp_deploy
        
        # Copy files to temp directory, excluding unwanted files
        rsync -av --exclude='node_modules' \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='coverage' \
          --exclude='test-results.xml' \
          --exclude='.coverage' \
          --exclude='htmlcov' \
          --exclude='.env' \
          --exclude='debug.log' \
          --exclude='db.sqlite3' \
          --exclude='temp_deploy' \
          ./ temp_deploy/
        
        # Create tar from the temp directory
        tar -czf deployment.tar.gz -C temp_deploy .
        
        # Clean up temp directory
        rm -rf temp_deploy

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Copy files to GCE instance
      run: |
        gcloud compute scp deployment.tar.gz $GCE_INSTANCE:$PROJECT_PATH/ --zone=$GCE_ZONE

    - name: Deploy application
      run: |
        gcloud compute ssh $GCE_INSTANCE --zone=$GCE_ZONE --command="
          cd $PROJECT_PATH &&
          
          # Backup current deployment
          if [ -d 'app_backup' ]; then
            rm -rf app_backup_old
            mv app_backup app_backup_old
          fi
          
          # Extract new deployment
          tar -xzf deployment.tar.gz
          
          # Install/update dependencies
          cd backend &&
          source venv/bin/activate &&
          pip install -r requirements.txt &&
          
          # Run database migrations
          python manage.py migrate --noinput &&
          
          # Collect static files
          python manage.py collectstatic --noinput &&
          
          # Restart services
          cd .. &&
          sudo docker-compose -f docker-compose.gce.yml down &&
          sudo docker-compose -f docker-compose.gce.yml up -d --build &&
          
          # Wait for services to be ready
          sleep 30 &&
          
          # Health check
          curl -f http://localhost/api/ || exit 1 &&
          
          # Clean up
          rm deployment.tar.gz &&
          echo 'Deployment completed successfully'
        "

    - name: Run post-deployment tests
      run: |
        gcloud compute ssh $GCE_INSTANCE --zone=$GCE_ZONE --command="
          cd $PROJECT_PATH &&
          
          # Test API endpoints
          curl -f http://localhost/api/ || exit 1
          curl -f http://localhost/api/directory/academic-years/ || exit 1
          curl -f http://localhost/api/course-api/courses/ || exit 1
          
          # Test frontend
          curl -f http://localhost/ || exit 1
          
          echo 'All health checks passed'
        "

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment to ${{ github.event.inputs.environment || 'production' }} successful!"
        else
          echo "❌ Deployment to ${{ github.event.inputs.environment || 'production' }} failed!"
        fi

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy]

    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Rollback to previous version
      run: |
        gcloud compute ssh $GCE_INSTANCE --zone=$GCE_ZONE --command="
          cd $PROJECT_PATH &&
          
          if [ -d 'app_backup_old' ]; then
            echo 'Rolling back to previous version...' &&
            rm -rf app_backup &&
            mv app_backup_old app_backup &&
            cd app_backup &&
            sudo docker-compose -f docker-compose.gce.yml down &&
            sudo docker-compose -f docker-compose.gce.yml up -d &&
            echo 'Rollback completed'
          else
            echo 'No backup found for rollback'
            exit 1
          fi
        "

    - name: Notify rollback status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Rollback successful!"
        else
          echo "❌ Rollback failed!"
        fi
